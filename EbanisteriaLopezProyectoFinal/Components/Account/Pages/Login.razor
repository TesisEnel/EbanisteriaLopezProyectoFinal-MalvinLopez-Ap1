@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using EbanisteriaLopezProyectoFinal.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-wrapper py-5">
    <div class="login-container card shadow-lg p-4 p-md-5 rounded-3 mx-auto">
        <div class="text-center mb-4">
            <img src="/imagenes/unnamed-removebg-preview.png" alt="Ebanisteria Lopez Logo" class="login-logo mb-3 mx-auto d-block" style="max-width: 200px; width: 50vw; height: auto;" />

            <h1 class="h3 fw-bold text-dark mb-1">¡Bienvenido de Nuevo!</h1>
            <p class="text-secondary">Ingrese a su cuenta de Ebanisteria Lopez.</p>
        </div>

        <StatusMessage Message="@errorMessage" />
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <section>
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                       
           
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="Input.Email" class="form-label">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="Input.Password" class="form-label">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                                Remember me
                            </label>
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary login-btn">Log in</button>
                        </div>
                        <div class="mt-4 text-center">
                            <p class="mb-1">
                                <a href="Account/ForgotPassword" class="text-primary-hover text-decoration-none">Forgot your password?</a>
                            </p>
                            <p class="mb-1">
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-primary-hover text-decoration-none">Register as a new user</a>
                            </p>
                            <p class="mb-0">
                                <a href="Account/ResendEmailConfirmation" class="text-primary-hover text-decoration-none">Resend email confirmation</a>
                            </p>
                        </div>
                    </EditForm>
                </section>
            </div>
            <div class="col-lg-10 mt-4 border-top pt-4">
                <section class="text-center">
                 
                    <hr class="mb-3" />
                    <ExternalLoginPicker />
                </section>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

