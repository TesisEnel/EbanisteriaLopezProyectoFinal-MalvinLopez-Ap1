@page "/store"
@using EbanisteriaLopezProyectoFinal.Components.Services
@using EbanisteriaLopezProyectoFinal.Components.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@inject ProductoService ProductoService
@inject CarritoService CarritoService
@inject EstadoProductoService EstadoProductoService
@inject CategoriaServices CategoriaServices
@inject IToastService Toast
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Tienda - Ebanisteria Lopez</PageTitle>

<main>
    <!-- Header y navegación igual que antes -->

    <div class="position-relative d-flex flex-column justify-content-center align-items-center text-white"
         style="height: 50vh; max-height: 25rem; background-image:url('/imagenes/store-hero.jpg'); background-size: cover; background-position: center;">
        <div class="position-absolute top-0 start-0 w-100 h-100 bg-dark opacity-50" style="z-index: -1;"></div>
        <div class="container text-center py-5 position-relative z-1">
            <h1 class="display-4 fw-bold text-white mb-4">Nuestra Tienda</h1>
            <p class="lead mb-0">Encuentra piezas únicas de mobiliario y carpintería artesanal.</p>
        </div>
    </div>

    <section class="container py-5">
        <div class="row mb-4">
            <div class="col-md-6 position-relative">
                <input type="text" class="form-control ps-5" placeholder="Buscar por nombre..."
                       @bind="SearchTerm" @bind:event="oninput" />
                <span class="position-absolute top-50 start-3 translate-middle-y text-muted">
                    <i class="bi bi-search"></i>
                </span>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="SelectedCategory">
                    <option value="">Todas las categorías</option>
                    @foreach (var cat in AvailableCategories)
                    {
                        <option value="@cat.Nombre">@cat.Nombre</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="SelectedPriceRange">
                    <option value="">Todos los precios</option>
                    <option value="0-5000">Hasta $5,000</option>
                    <option value="5001-10000">$5,001 - $10,000</option>
                    <option value="10001-20000">$10,001 - $20,000</option>
                    <option value="20001-max">Más de $20,000</option>
                </select>
            </div>
        </div>

        <div class="row g-4">
            @if (FilteredProducts == null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary"></div>
                    <p>Cargando productos...</p>
                </div>
            }
            else if (!FilteredProducts.Any())
            {
                <div class="text-center">
                    <p>No se encontraron productos.</p>
                </div>
            }
            else
            {
                @foreach (var product in FilteredProducts)
                {
                    var mainImage = product.Imagenes?.OrderBy(i => i.Orden).FirstOrDefault()?.UrlImagen ?? "/imagenes/no-image.jpg";
                    <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                        <div class="card h-100 shadow-sm">
                            <img src="@mainImage" class="card-img-top" alt="@product.Detalle?.Descripcion" style="height: 200px; object-fit: cover;" />
                            <div class="card-body d-flex flex-column">
                                <h6 class="fw-bold mb-1 text-truncate" title="@product.Detalle?.Descripcion">
                                    Descripción: <span class="fw-normal">@product.Detalle?.Descripcion</span>
                                </h6>
                                <p class="text-muted mb-1 text-truncate" title="@product.Detalle?.Material">
                                    <strong>Material:</strong> @product.Detalle?.Material
                                </p>
                                <p class="mb-1 text-primary fw-bold">
                                    <strong>Precio:</strong> @product.Precio.ToString("C", new System.Globalization.CultureInfo("es-DO"))
                                </p>
                                <p class="mb-1 text-muted">
                                    <strong>Cantidad:</strong> @product.Cantidad
                                </p>
                                <p class="mb-2 text-muted text-truncate" title="@product.EstadoProducto?.Nombre">
                                    <strong>Estado:</strong> @product.EstadoProducto?.Nombre
                                </p>

                                <div class="mt-auto d-flex flex-wrap gap-1">
                                    @if (product.EstadoProducto?.Nombre?.ToLower() == "disponible")
                                    {
                                        <button class="btn btn-outline-primary btn-sm"
                                                @onclick="() => AddToCart(product.ProductoId)">
                                            Añadir
                                        </button>
                                    }
                                    else
                                    {
                                        <a class="btn btn-outline-warning btn-sm"
                                           href="/cotizaciones/solicitar/@product.ProductoId">
                                            Solicitar Cotización
                                        </a>
                                    }

                                    <a href="/producto/@product.ProductoId" class="btn btn-outline-secondary btn-sm">Ver Detalles</a>

                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <a href="/admin/productos/editar/@product.ProductoId" class="btn btn-outline-secondary btn-sm">Editar</a>
                                        </Authorized>
                                    </AuthorizeView>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </section>
</main>

@code {
    private List<Producto>? AllProducts;
    private List<Producto>? FilteredProducts;
    private List<Categoria> AvailableCategories = new();
    private List<EstadoProducto> Estados = new();

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedPriceRange = string.Empty;

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedCategory
    {
        get => selectedCategory;
        set
        {
            if (selectedCategory != value)
            {
                selectedCategory = value;
                ApplyFilters();
            }
        }
    }

    private string SelectedPriceRange
    {
        get => selectedPriceRange;
        set
        {
            if (selectedPriceRange != value)
            {
                selectedPriceRange = value;
                ApplyFilters();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        AvailableCategories = await CategoriaServices.Listar();

        AllProducts = await ProductoService.Listar(p => true);
        Estados = await EstadoProductoService.Listar();

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (AllProducts == null)
        {
            FilteredProducts = new();
            return;
        }

        var query = AllProducts.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(SearchTerm))
            query = query.Where(p => p.Detalle != null && p.Detalle.Descripcion.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrEmpty(SelectedCategory))
            query = query.Where(p => p.Categoria != null && p.Categoria.Nombre == SelectedCategory);

        if (!string.IsNullOrEmpty(SelectedPriceRange))
        {
            query = SelectedPriceRange switch
            {
                "0-5000" => query.Where(p => p.Precio <= 5000),
                "5001-10000" => query.Where(p => p.Precio > 5000 && p.Precio <= 10000),
                "10001-20000" => query.Where(p => p.Precio > 10000 && p.Precio <= 20000),
                "20001-max" => query.Where(p => p.Precio > 20000),
                _ => query
            };
        }

        FilteredProducts = query.ToList();
    }

    private void AddToCart(int productoId)
    {
        var producto = AllProducts?.FirstOrDefault(p => p.ProductoId == productoId);
        if (producto != null)
        {
            CarritoService.AgregarProducto(producto, 1);
            Toast.ShowSuccess($"Producto añadido: {producto.Detalle?.Descripcion}");
        }
    }
}
