@page "/admin/productos/crear"
@attribute [Authorize(Roles = "Admin")]
@using EbanisteriaLopezProyectoFinal.Components.Models
@using EbanisteriaLopezProyectoFinal.Components.Services
@inject ProductoService ProductoService
@inject CategoriaServices CategoriaServices
@inject EstadoProductoService EstadoProductoService
@inject SupabaseStorageService SupabaseStorage
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<PageTitle>Crear Producto</PageTitle>

<h3 class="mb-4">Crear nuevo producto</h3>

<EditForm Model="@producto" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Título</label>
        <InputText class="form-control" @bind-Value="producto.Nombre" />
        <ValidationMessage For="@(() => producto.Nombre)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Precio</label>
        <InputNumber class="form-control" @bind-Value="producto.Precio" />
        <ValidationMessage For="@(() => producto.Precio)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Cantidad</label>
        <InputNumber class="form-control" @bind-Value="producto.Cantidad" />
        <ValidationMessage For="@(() => producto.Cantidad)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Categoría</label>
        <InputSelect class="form-select" @bind-Value="producto.CategoriaId">
            <option value="0">-- Seleccione una categoría --</option>
            @foreach (var categoria in categorias)
            {
                <option value="@categoria.CategoriaId">@categoria.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => producto.CategoriaId)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Estado del producto</label>
        <InputSelect class="form-select" @bind-Value="producto.EstadoProductoId">
            <option value="0">-- Seleccione un estado --</option>
            @foreach (var estado in estadosProducto)
            {
                <option value="@estado.EstadoProductoId">@estado.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => producto.EstadoProductoId)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Descripción</label>
        <InputTextArea class="form-control" @bind-Value="producto.Detalle.Descripcion" />
        <ValidationMessage For="@(() => producto.Detalle.Descripcion)" />
    </div>

    <div class="row">
        <div class="col-md-4 mb-3">
            <label class="form-label">Material</label>
            <InputText class="form-control" @bind-Value="producto.Detalle.Material" />
            <ValidationMessage For="@(() => producto.Detalle.Material)" />
        </div>
        <div class="col-md-4 mb-3">
            <label class="form-label">Color</label>
            <InputText class="form-control" @bind-Value="producto.Detalle.Color" />
            <ValidationMessage For="@(() => producto.Detalle.Color)" />
        </div>
        <div class="col-md-4 mb-3">
            <label class="form-label">Dimensiones</label>
            <InputText class="form-control" @bind-Value="producto.Detalle.Dimensiones" />
            <ValidationMessage For="@(() => producto.Detalle.Dimensiones)" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Imágenes</label>
        <InputFile OnChange="CargarArchivosSeleccionados" multiple accept="image/*" />
        @if (archivosSeleccionados.Count > 0)
        {
            <div class="text-success mt-2">
                @archivosSeleccionados.Count archivo(s) seleccionado(s)
            </div>
        }
    </div>

    <div class="mt-4">
        <button type="submit" class="btn btn-primary">Guardar</button>
        <a href="/admin/home" class="btn btn-secondary ms-2">Cancelar</a>
    </div>
</EditForm>

@code {
    private Producto producto = new()
    {
        Detalle = new ProductoDetalle()
    };

    private List<Categoria> categorias = new();
    private List<EstadoProducto> estadosProducto = new();
    private List<IBrowserFile> archivosSeleccionados = new();

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriaServices.Listar();
        estadosProducto = await EstadoProductoService.Listar();
    }

    private void CargarArchivosSeleccionados(InputFileChangeEventArgs e)
    {
        var archivos = e.GetMultipleFiles().ToList();

        if (archivos.Count > 5)
        {
            ToastService.ShowWarning("Solo puedes seleccionar hasta 5 imágenes.");
            archivosSeleccionados = archivos.Take(5).ToList();
        }
        else
        {
            archivosSeleccionados = archivos;
        }
    }

    private async Task Guardar()
    {
        try
        {
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            if (!user.Identity?.IsAuthenticated ?? true)
            {
                ToastService.ShowError("Debe iniciar sesión.");
                return;
            }

            var guardado = await ProductoService.Guardar(producto);

            if (guardado && archivosSeleccionados.Any())
            {
                var urls = await SupabaseStorage.UploadFiles(archivosSeleccionados);
                foreach (var url in urls)
                {
                    var imagen = new ImagenProducto
                    {
                        ProductoId = producto.ProductoId,
                        UrlImagen = url,
                        Orden = urls.IndexOf(url) + 1
                    };
                    await ProductoService.AgregarImagen(imagen);
                }
            }

            if (guardado)
            {
                ToastService.ShowSuccess("Producto guardado correctamente.");
                NavigationManager.NavigateTo("/admin/home");
            }
            else
            {
                ToastService.ShowError("Error al guardar el producto.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error: {ex.Message}");
        }
    }
}
