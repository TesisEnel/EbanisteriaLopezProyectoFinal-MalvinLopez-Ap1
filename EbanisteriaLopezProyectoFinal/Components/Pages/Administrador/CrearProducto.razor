@page "/admin/productos/create"
@attribute [Authorize(Roles = "Admin")]
@using EbanisteriaLopezProyectoFinal.Components.Services
@using Blazored.Toast.Services
@using Microsoft.EntityFrameworkCore;

@inject ProductoServices ProductoServices
@inject CategoriaServices CategoriaServices
@inject NavigationManager NavigationManager
@inject SupabaseStorage SupabaseStorage
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Crear Producto</PageTitle>

<EditForm Model="@producto" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="titleCreate">
        <h1>Crear nuevo producto</h1>
    </div>

    <div class="containerCreate">
        <InputFile class="form-control text-secondary w-auto" OnChange="CargarArchivosSeleccionados" accept="image/*" multiple />

        @if (archivosSeleccionados.Count > 0)
        {
            <div class="mt-2 text-success">
                @archivosSeleccionados.Count archivo(s) seleccionado(s)
            </div>
        }


        <div class="containerForm mb-3">
            <label class="form-label fs-5">Nombre</label>
            <InputText class="form-control" @bind-Value="producto.Nombre" placeholder="Nombre del producto" />
        </div>

        <div class="containerForm mb-3">
            <label class="form-label fs-5">Precio</label>
            <InputNumber class="form-control" @bind-Value="producto.Precio" placeholder="Precio del producto" />
        </div>

        <div class="containerForm mb-3">
            <label class="form-label fs-5">Categoría</label>
            <InputSelect class="form-select" @bind-Value="producto.CategoriaId">
                <option value="">Seleccione una categoría</option>
                @foreach (var cat in categorias)
                {
                    <option value="@cat.CategoriaId">@cat.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="containerForm mb-3">
            <label class="form-label fs-5">Estado</label>
            <InputSelect class="form-select" @bind-Value="producto.EstadoProductoId">
                <option value="">Seleccione un estado</option>
                <option value="1">Disponible</option>
                <option value="2">Agotado</option>
            </InputSelect>
        </div>

        <div class="containerForm mb-3">
            <label class="form-label fs-5">Descripción</label>
            <InputTextArea class="form-control" @bind-Value="producto.Detalle!.Descripcion" placeholder="Descripción del producto" />
        </div>

        <div class="containerForm-row mb-3">
            <div class="containerForm-half">
                <label class="form-label fs-5">Material</label>
                <InputText class="form-control" @bind-Value="producto.Detalle!.Material" placeholder="Material del producto" />
            </div>
            <div class="containerForm-half">
                <label class="form-label fs-5">Color</label>
                <InputText class="form-control" @bind-Value="producto.Detalle!.Color" placeholder="Color del producto" />
            </div>
            <div class="containerForm-half">
                <label class="form-label fs-5">Dimensiones</label>
                <InputText class="form-control" @bind-Value="producto.Detalle!.Dimensiones" placeholder="Ej. 100x50x30cm" />
            </div>
        </div>

        <div class="container d-flex justify-content-center gap-2">
            <a href="/admin/productos" class="btn btn-secondary">Volver</a>
            <button type="submit" class="btn btn-primary">Guardar</button>
        </div>
    </div>
</EditForm>

@code {
    private Producto producto = new()
        {
            Nombre = string.Empty,
            Precio = 0,
            CategoriaId = 0,
            EstadoProductoId = 1,
            Detalle = new ProductoDetalle()
        };

    private List<IBrowserFile> archivosSeleccionados = new();
    private List<Categoria> categorias = new();

    protected override async Task OnInitializedAsync()
    {
        categorias = await CategoriaServices.Listar(c => true);
        if (categorias.Any())
        {
            producto.CategoriaId = categorias.First().CategoriaId;
        }
    }

    private void CargarArchivosSeleccionados(InputFileChangeEventArgs e)
    {
        archivosSeleccionados = e.GetMultipleFiles().ToList();
    }

    private async Task Guardar()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (!user.Identity?.IsAuthenticated ?? true)
                throw new InvalidOperationException("Usuario no autorizado.");

            // Asegurarse de que la relación entre Producto y ProductoDetalle esté establecida
            producto.Detalle.Producto = producto;

            var guardado = await ProductoServices.Guardar(producto);

            if (guardado && archivosSeleccionados.Any())
            {
                var urls = await SupabaseStorage.UploadFiles(archivosSeleccionados);
                foreach (var url in urls)
                {
                    var imagen = new ImagenProducto
                        {
                            ProductoId = producto.ProductoId,
                            Url = url,
                            Orden = urls.IndexOf(url) + 1
                        };
                    await ProductoServices.AgregarImagen(imagen);
                }
            }

            if (guardado)
            {
                ToastService.ShowSuccess("Producto creado correctamente.");
                NavigationManager.NavigateTo("/admin/home");
            }
            else
            {
                ToastService.ShowError("Error al guardar el producto.");
            }
        }
        catch (DbUpdateException dbEx)
        {
            var inner = dbEx.InnerException?.Message ?? dbEx.Message;
            ToastService.ShowError($"Error en la base de datos: {inner}");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error general: {ex.Message}");
        }
    }
}
